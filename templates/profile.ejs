<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Edit Profile</title>
  <link rel="stylesheet" href="../static/styles/header.css"> <!-- 헤더 스타일을 포함한 CSS 파일 -->
  <style>
    @font-face {
        font-family: 'PR';
        src: url('https://fastly.jsdelivr.net/gh/Project-Noonnu/noonfonts_2107@1.1/Pretendard-Regular.woff') format('woff');
        font-weight: 400;
        font-style: normal;
    }

    body {
        font-family: 'PR';
        background-color: #f9f9f9;
        margin: 0;
        padding: 0;
    }
    .layout {
        display: flex;
        gap: 20px;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }
    .sidebar {
        width: 300px;
        background-color: #f1f1f1;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    .container {
        flex: 1;
        background-color: #ffffff;
        padding: 40px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    .profile-header {
        display: flex;
        align-items: center;
        gap: 20px;
        margin-bottom: 20px;
    }
    .profile-header img {
        border-radius: 50%;
        width: 150px;
        height: 150px;
    }
    .profile-details {
        flex: 1;
    }
    .profile-details h2 {
        margin: 0;
    }
    .profile-details p {
        margin: 5px 0;
        color: #888;
    }
    .edit-profile-button {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none; /* 링크 스타일 제거 */
        display: inline-block; /* 블록 요소로 표시 */
        margin-top: 20px;
    }
    .github-link {
        color: #007bff;
        text-decoration: none;
    }
    .github-link:hover {
        text-decoration: underline;
    }
    label {
        font-weight: bold;
        display: block;
        margin-bottom: 5px;
    }
    input[type="text"],
    input[type="number"],
    input[type="email"] {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-sizing: border-box;
    }
    input[type="text"][readonly] {
        background-color: rgba(200, 200, 200, 0.5);
    }
  </style>
</head>
<body>
  <%- include('header') %>
  <div class="layout">
    <div class="sidebar">
      <div class="profile-header">
        <img id="githubProfileImage" src="<%= user.profileImageUrl %>" alt="GitHub Profile Image" style="display: <%= user.profileImageUrl ? 'block' : 'none' %>;">
        <div class="profile-details">
          <h2><%= user.name %></h2>
          <p>아이디: <%= user.id %></p>
          <p>이메일: <%= user.email %></p>
          <p>직업: <%= user.job %></p>
          <p>나이: <%= user.age %></p>
          <p>GitHub: <a class="github-link" href="https://github.com/<%= user.githubUsername %>" target="_blank"><%= user.githubUsername %></a></p>
        </div>
      </div>
      <a class="edit-profile-button" href="/editProfile">프로필 수정</a>
    </div>
    <div class="container">
      <!-- 여기에 다른 내용을 추가할 수 있습니다 -->
      <h2>다른 내용</h2>
      <p>이곳에 추가적인 정보를 넣을 수 있습니다.</p>
    </div>
  </div>

  <script>
    function toggleDropdown() {
        const dropdown = document.getElementById('dropdown-menu');
        dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
    }

    document.getElementById('githubUsername').addEventListener('blur', async (event) => {
      const githubUsername = event.target.value;
      if (githubUsername) {
        try {
          const response = await fetch(`https://api.github.com/users/${githubUsername}`);
          if (response.ok) {
            const data = await response.json();
            const profileImageUrl = data.avatar_url;
            const profileImageElement = document.getElementById('githubProfileImage');
            profileImageElement.src = profileImageUrl;
            profileImageElement.style.display = 'block';
          } else {
            alert('GitHub 사용자 정보를 가져올 수 없습니다.');
          }
        } catch (error) {
          console.error('GitHub 사용자 정보를 가져오는 중 오류 발생:', error);
          alert('GitHub 사용자 정보를 가져오는 중 오류가 발생했습니다.');
        }
      }
    });

    document.getElementById('editProfileForm').addEventListener('submit', async (event) => {
      event.preventDefault();
      const formData = new FormData(event.target);
      const data = Object.fromEntries(formData.entries());

      try {
        const response = await fetch('/editProfile', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });

        const result = await response.json();

        if (response.ok) {
          alert(result.message);
          window.location.reload();
        } else {
          alert(result.message || '프로필 업데이트 중 오류가 발생했습니다.');
        }
      } catch (error) {
        console.error('프로필 업데이트 중 오류 발생:', error);
        alert('프로필 업데이트 중 오류가 발생했습니다.');
      }
    });
  </script>
</body>
</html>
