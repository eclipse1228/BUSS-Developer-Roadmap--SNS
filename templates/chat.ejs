<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat with Assistant</title>
  <link rel="stylesheet" href="../static/styles/header.css"> <!-- Include header styles -->
  <style>
    /* Existing styles */
    @font-face {
        font-family: 'PR';
        src: url('https://fastly.jsdelivr.net/gh/Project-Noonnu/noonfonts_2107@1.1/Pretendard-Regular.woff') format('woff');
        font-weight: 400;
        font-style: normal;
    }

    body {
      font-family: 'PR';
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
      height: 100vh;
      margin: 0;
      background-color: #f9f9f9;
    }
    #chat {
      width: 65%;
      max-width: 800px;
      height: 73%;
      border: 1px solid #ccc;
      padding: 20px;
      overflow-y: scroll;
      background-color: white;
      margin-top: 20px;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
      position: relative;
      left: 54px; /* Move right by 54px */
    }
    .message-container {
      display: flex;
      margin-bottom: 15px;
    }
    .message-container.bot {
      justify-content: flex-start;
    }
    .message-container.user {
      justify-content: flex-end;
    }
    .message {
      max-width: 70%;
      padding: 10px 15px;
      border-radius: 20px;
      position: relative;
    }
    .message.bot {
      background-color: #e9e9eb;
    }
    .message.user {
      background-color: #007bff;
      color: white;
    }
    .message-input-container {
      width: 60%;
      max-width: 846px;
      display: flex;
      margin-top: 20px;
      position: relative;
      left: 54px; /* Move right by 54px */
    }
    #message {
      width: 100%;
      padding: 23px;
      border: 1px solid #ccc;
      border-radius: 20px;
      margin-right: 10px;
      font-size: 22px;
    }
    #send, #upload-pdf {
      padding: 10px 20px;
      background-color: #007bff;
      border: none;
      color: white;
      border-radius: 20px;
      cursor: pointer;
      margin-right: 10px;
    }
    #send:hover, #upload-pdf:hover {
      background-color: #0056b3;
    }
    #pdf-file {
      display: none;
    }
    .svg-container {
      position: relative;
      /* display: flex; */
      width: 42%;
      /* max-width: px; */
      height: 73%;
      padding: 20px;
      overflow-y: scroll;
      background-color: white;
      /* margin-top: 200px; */
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      position: absolute; 
      left: 919px;
      top: 100px;
     }
    .node {
      position: absolute;
      background-color: rgb(219, 251, 12);
      border: 1px solid black;
      text-align: center;
      line-height: 1.5;
      padding: 10px;
      border-radius: 8px;
      font-size: 14px;
      cursor: pointer;
    }
    .clickable-group:hover rect {
      fill: #ffeb3b;
    }
    .modal {
      
      display: none;
      position: fixed;
      z-index: 1;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0,0,0,0.5);
    }
    .modal-content {
      position: absolute;
    top: 50%;
    left: 50%;
      transform: translate(-50%, -50%);
      background-color: #fefefe;
    width: 300px;
    height: 150px;
      padding: 20px;
      border: 1px solid #888;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      border-radius: 10px;
    }
    .close {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
    }
    .close:hover,
    .close:focus {
      color: black;
      text-decoration: none;
      cursor: pointer;
    }
    .chat_inbox {
      left: 5px;
    }

    /* 추가된 스타일 */
    .button-link {
      display: inline-block;
      padding: 10px 20px;
      background-color: #007bff;
      color: white;
      text-align: center;
      text-decoration: none;
      border-radius: 20px;
      cursor: pointer;
      margin-top: 10px;

    }
    .button-link:hover {
      background-color: #0056b3;
    }
    /* 글꼴 크기 키우는 스타일 */
    .large-font {
      font-size: 1.5em;
    }
  </style>
</head>
<body>
  <%- include('header') %> 
  <div id="chat"></div>
  <div class="message-input-container">
    <input type="text" id="message" placeholder="Type your message...">
    <button id="send">Send</button>
    <input type="file" id="pdf-file" accept="application/pdf">
  </div>
  <div class="svg-container">
    <svg id="roadmapSvg" width="10000" height="10000"></svg>
  </div>
  <!-- Roadmap Modal -->
  <div id="courseModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
      <p id="courseDescription"></p>
      <a id="courseLink" class="button-link" href="" target="_blank">Go to Course</a>
    </div>
  </div>
  <script>
    function showLoading() {
    const loadingDiv = document.createElement('div');
    loadingDiv.id = 'loading';
    loadingDiv.textContent = 'Loading...';
    loadingDiv.style.position = 'absolute';
    loadingDiv.style.top = '50%';
    loadingDiv.style.left = '50%';
    loadingDiv.style.transform = 'translate(-50%, -50%)';
    loadingDiv.style.fontSize = '24px';
    document.querySelector('.svg-container').appendChild(loadingDiv);
  }

    function hideLoading() {
    const loadingDiv = document.getElementById('loading');
    if (loadingDiv) {
      loadingDiv.remove();
    }
  }

    async function updateRoadmap() {
    try {
      const response = await fetch('/updateRoadmap', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
      });
    const roadmapData = await response.json();
    console.log('Received roadmap data:', roadmapData);
      drawRoadmap(roadmapData); 
    } catch (error) {
      console.error('Error updating roadmap:', error);
    }
  }

    function toggleDropdown() {
          const dropdown = document.getElementById('dropdown-menu');
          dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
      }
    async function sendMessage() {
      const messageInput = document.getElementById('message');
      const message = messageInput.value;
      if (!message) return;

      // Clear input immediately
      messageInput.value = '';






      // Display user message
      const chat = document.getElementById('chat');
      const userMessageContainer = document.createElement('div');
      userMessageContainer.classList.add('message-container','user');
      const userMessage = document.createElement('div');
      userMessage.classList.add('message', 'user');
      userMessage.textContent = message;
      userMessageContainer.appendChild(userMessage);
      chat.appendChild(userMessageContainer);

      console.log('Sending message:', message);

      // 로딩 화면 표시
      showLoading();

      // Send message to server
      const response = await fetch('/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ contents: message })
      });
      console.log("send message:", message);

      const data = await response.json();
      // 로드맵 업데이트
      if (data.roadmap) {
            drawRoadmap(data.roadmap);
      }

      // Display bot message
      const botMessageContainer = document.createElement('div');
      botMessageContainer.classList.add('message-container', 'bot');
      const botMessage = document.createElement('div');
      botMessage.classList.add('message', 'bot');
      botMessage.textContent = data.bot;
      botMessageContainer.appendChild(botMessage);
      chat.appendChild("로드맵이 업데이트 되었습니다.");
      chat.scrollTop = chat.scrollHeight;

      // (3) response가 왔으면, loading html 제거하기
      hideLoading();
      // (4) post 요청으로 ./updateRoadmap 
      // chat.js에서 DB에서 로드맵 조회한 결과를 const roadmap_response 로 받아오기 
      // 로드맵 업데이트 요청
      // updateRoadmap();
    }

    document.getElementById('send').addEventListener('click', sendMessage);

    document.getElementById('message').addEventListener('keypress', (event) => {
      if (event.key === 'Enter') {
        event.preventDefault(); // Prevent the default action (if any)
        sendMessage();
      }
    });

    function drawNode(svg, x, y, label, size) {
      const group = document.createElementNS('http://www.w3.org/2000/svg', 'g');
      group.setAttribute('class', 'clickable-group');
      group.setAttribute('data-label', label);

      const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
      rect.setAttribute('x', x);
      rect.setAttribute('y', y);
      rect.setAttribute('width', size.width);
      rect.setAttribute('height', size.height);
      rect.setAttribute('rx', 2);
      rect.setAttribute('fill', 'yellow');
      rect.setAttribute('stroke', 'black');
      rect.setAttribute('stroke-width', 2.7);
      group.appendChild(rect);

      const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
      text.setAttribute('x', x + size.width / 2);
      text.setAttribute('y', y + size.height / 2);
      text.setAttribute('fill', 'black');
      text.setAttribute('font-size', '17px');
      text.setAttribute('text-anchor', 'middle');
      text.setAttribute('dominant-baseline', 'middle');
      text.textContent = label;
      group.appendChild(text);

      svg.appendChild(group);
      return group;
    }

  function drawRoadmap(data) {
      console.log('Drawing roadmap with data:', data); // 추가된 로그
      const svg = document.getElementById('roadmapSvg');
      svg.innerHTML = ''; // Clear existing content
      
      if (!data || typeof data !== 'object' || Object.keys(data).length === 0) {
      console.error('Invalid roadmap data');
      return;
      }

      // Define node sizes
      const nodeSize = { width: 260, height: 50 };
      const itemSize = { width: 200, height: 50 };

      // Define initial positions
      const startX = 200;
      const startY = 100;
      const xOffset = 300;
      const yOffset = 100;
      const itemXOffset = 300;

      // Draw nodes
      const categoryNodes = {};
      let currentY = startY;

      try { 
  // data 객체의 첫 번째 키-값 쌍을 사용
      const [mainCategory, categories] = Object.entries(data)[0];

    const categoryGroup = drawNode(svg, startX, currentY, mainCategory.toUpperCase(), nodeSize);
    categoryNodes[mainCategory] = { group: categoryGroup, x: startX, y: currentY, width: nodeSize.width, height: nodeSize.height, items: [] };

    currentY += nodeSize.height + yOffset;

    for (const [category, topics] of Object.entries(categories)) {
      const categoryX = startX + itemXOffset;
        const categoryY = currentY;
      const categoryGroup = drawNode(svg, categoryX, categoryY, category, nodeSize);
        categoryNodes[category] = { group: categoryGroup, x: categoryX, y: categoryY, width: nodeSize.width, height: nodeSize.height, items: [] };

      drawConnection(svg, startX + nodeSize.width, startY + nodeSize.height / 2, categoryX, categoryY + nodeSize.height / 2);

        let itemY = categoryY + nodeSize.height + 20;
      for (const [topic, topicData] of Object.entries(topics)) {
        const itemGroup = drawNode(svg, categoryX + itemXOffset, itemY, topic, itemSize);
        categoryNodes[category].items.push({ group: itemGroup, x: categoryX + itemXOffset, y: itemY, width: itemSize.width, height: itemSize.height, data: topicData });
          drawConnection(svg, categoryX + nodeSize.width, categoryY + nodeSize.height / 2, categoryX + itemXOffset, itemY + itemSize.height / 2);
          itemY += itemSize.height + 20;
        }

      currentY = Math.max(itemY, currentY + nodeSize.height + yOffset);
      }

      // Add click event listeners for nodes
      svg.addEventListener('click', (event) => {
        const point = svg.createSVGPoint();
        point.x = event.clientX;
        point.y = event.clientY;
        const cursorPoint = point.matrixTransform(svg.getScreenCTM().inverse());

        
        for (const category in categoryNodes) {
          const categoryNode = categoryNodes[category];
          if (isInsideNode(cursorPoint.x, cursorPoint.y, categoryNode)) {
            openModal(categoryNode);
            return;
          }
          for (const itemNode of categoryNode.items) {
            if (isInsideNode(cursorPoint.x, cursorPoint.y, itemNode)) {
              openModal(itemNode);
              return;
            }
          }
        }
      });
    }
    catch (error){
      console.error('Error processing roadmap data:', error);
     }
    }

    function drawConnection(svg, x1, y1, x2, y2) {
      const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
      line.setAttribute('x1', x1);
      line.setAttribute('y1', y1);
      line.setAttribute('x2', x2);
      line.setAttribute('y2', y2);
      line.setAttribute('stroke', '#888');
      line.setAttribute('stroke-width', 2);
      svg.appendChild(line);
    }

    function drawVerticalConnection(svg, x, y1, y2) {
      const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
      line.setAttribute('x1', x);
      line.setAttribute('y1', y1);
      line.setAttribute('x2', x);
      line.setAttribute('y2', y2);
      line.setAttribute('stroke', '#888');
      line.setAttribute('stroke-width', 2);
      svg.appendChild(line);
    }

    function isInsideNode(x, y, node) {
      return x >= node.x && x <= node.x + node.width && y >= node.y && y <= node.y + node.height;
    }

    function openModal(node) {
      const modal = document.getElementById('courseModal');
      const courseDescription = document.getElementById('courseDescription');
      const courseLink = document.getElementById('courseLink');

      courseDescription.textContent = node.data.description;
      courseLink.href = `https://${node.data.course}`;

      // 글꼴 크기를 키우는 클래스 추가
      courseDescription.classList.add('large-font');
      courseLink.classList.add('large-font');

      modal.style.display = 'block';
    }

    function closeModal() {
      const modal = document.getElementById('courseModal');
      modal.style.display = 'none';
    }

    // Close modal when the user clicks on <span> (x)
    document.getElementsByClassName('close')[0].onclick = function() {
      closeModal();
    }

    // Close modal when the user clicks anywhere outside of the modal
    window.onclick = function(event) {
      const modal = document.getElementById('courseModal');
      if (event.target == modal) {
        closeModal();
      }
    }

    // 아래의 예시처럼 db에서 roadmap json 조회해서온다. (예시는 DB가 아닌, 그냥 임의의 json 파일로 예시를 들었음.)
    // Fetch data and draw roadmap on load and resize
    // fetch('../static/frontend.json')
    //   .then(response => response.json())
    //   .then(data => {
    //     drawRoadmap(data);
    //   })
    //   .catch(error => {
    //     console.error('Error:', error);
    //   });

    // window.addEventListener('resize', () => {
    //   fetch('../static/frontend.json')
    //     .then(response => response.json())
    //     .then(data => {
    //       drawRoadmap(data);
    //     })
    //     .catch(error => {
    //       console.error('Error:', error);
    //     });
    // });

  </script>
</body>
</html>