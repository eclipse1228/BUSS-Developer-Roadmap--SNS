<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Mentoring</title>
  <link rel="stylesheet" href="/static/styles/header.css">
  <style>
    /* 기존 CSS에서 추가한 스타일 */
    @font-face {
        font-family: 'PR';
        src: url('https://fastly.jsdelivr.net/gh/Project-Noonnu/noonfonts_2107@1.1/Pretendard-Regular.woff') format('woff');
        font-weight: 400;
        font-style: normal;
    }

    body {
        font-family: 'PR';
        background-color: #f9f9f9;
        margin: 0;
        padding: 0;
    }
    .layout {
        display: flex;
        gap: 20px;
        max-width: 1400px;
        margin: 0 auto;
        padding: 20px;
    }
    .sidebar {
        width: 300px;
        background-color: #f1f1f1;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    .container {
        flex: 1;
        background-color: #ffffff;
        padding: 40px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    .profile-header {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
        margin-bottom: 20px;
    }
    .profile-header img {
        border-radius: 50%;
        width: 300px; /* 프로필 사진 크기 조정 */
        height: 300px; /* 프로필 사진 크기 조정 */
        border: 3px solid #ccc; /* 얇은 테두리 추가 */
      }
    .profile-details {
        width: 100%;
        text-align: left;
    }
    .profile-details h2 {
        margin: 0;
    }
    .profile-details p {
        margin: 5px 0;
        color: #888;
    }
    .edit-profile-button {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none; /* 링크 스타일 제거 */
        display: inline-block; /* 블록 요소로 표시 */
        margin-top: 0px;
    }
    .github-link {
        color: #007bff;
        text-decoration: none;
    }
    .github-link:hover {
        text-decoration: underline;
    }
    .mentor-request-button {
        padding: 10px 20px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none; /* 링크 스타일 제거 */
        display: inline-block; /* 블록 요소로 표시 */
        margin-top: 10px;
    }
    .request {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px;
      border: 1px solid #ddd;
      margin-bottom: 10px;
    }
    .request span {
      flex: 1;
    }
    .request button {
      margin-right: 10px;
      padding: 8px 16px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    .request button:hover {
      background-color: #0056b3;
    }
  </style>
</head>
<body>
  <%- include('header') %>
  <div class="container">
    <h2>멘토링 신청자</h2>
    <% if (user.menteeRequests.length > 0) { %>
      <% user.menteeRequests.forEach(request => { %>
        <div class="request">
          <span><%= request %></span>
          <button onclick="handleAccept('<%= request %>')">수락</button>
          <button onclick="handleReject('<%= request %>')">거부</button>
        </div>
      <% }) %>
    <% } else { %>
      <p>No mentoring requests.</p>
    <% } %>
  </div>
  <script>
    function toggleDropdown() {
      const dropdown = document.getElementById('dropdown-menu');
      dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
    }
    function handleAccept(menteeId) {
      fetch('/mentoring/accept', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ menteeId })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert('Mentoring request accepted.');
          location.reload();
        } else {
          alert('Failed to accept mentoring request.');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error accepting mentoring request.');
      });
    }

    function handleReject(menteeId) {
      fetch('/mentoring/reject', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ menteeId })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert('Mentoring request rejected.');
          location.reload();
        } else {
          alert('Failed to reject mentoring request.');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error rejecting mentoring request.');
      });
    }
  </script>
</body>
</html>
